name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3


      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v1.13.1'


      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2


      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha
            type=schedule,pattern={{date 'YYYYMMDD'}}


      # Build docker image with buildx without cache (scheduled runs)
      - name: Build Docker image (scheduled runs)
        if: github.event_name == 'schedule'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: encoder-docker-base-image:action
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max


      # Build Docker image with Buildx (if not a scheduled run)
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        if: github.event_name != 'schedule'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: encoder-docker-base-image:action
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Test the Docker image
        run: |
          curl -LO https://media.xiph.org/video/derf/y4m/tt_sif.y4m
          docker run --rm -v "${pwd}:/videos" encoder-docker-base-image:action av1an -i /videos/tt_sif.y4m -o /videos/95.mkv -e x265 -v "-p 0 --crf 25" --target-quality 95 
          docker run --rm -v "${pwd}:/videos" encoder-docker-base-image:action av1an -i /videos/tt_sif.y4m -o /videos/80.mkv -e x265 -v "-p 0 --crf 25" --target-quality 80 
          du -h 95.mkv 80.mkv
          # compare the size of the two files to make sure 95.mkv is larger than 80.mkv
          if [ $(stat -c%s "95.mkv") -gt $(stat -c%s "80.mkv") ]; then echo "95.mkv is larger than 80.mkv"; else echo "95.mkv is smaller than 80.mkv"; exit 1; fi


      # Push the Docker image on tag events
      - name: Push the Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
